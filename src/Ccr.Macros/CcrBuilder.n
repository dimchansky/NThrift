using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.ComputationExpressions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using TExpr = Nemerle.Compiler.Typedtree.TExpr;

namespace NThrift.Ccr.Macros
{  
    [Record]
    public class CcrBuilder : ComputationBuilder
    {
        typer : Typer;
        dispatcherQueue : PExpr;
        dispatcherQueueLocalName : Name;

        public this(typer : Typer, dispatcherQueue : PExpr)
        {
            this(typer, dispatcherQueue, if (dispatcherQueue != null) Macros.NewSymbol("") else null)
        }
        
        public override Return (expr : PExpr) : PExpr
        {
            match (expr)
            {
                | <[()]> => <[ CcrBuilder.Return() ]>
                | _      => <[ CcrBuilder.Return($expr) ]>
            }            
        }

        public override ReturnComp (expr : PExpr) : PExpr
        {
            <[ $expr ]>
        }

        public override Yield (expr : PExpr) : PExpr
        {
            ignore (expr);
            Message.FatalError (expr.Location, "The ccr comprehension doesn't support the Yield method.")
        }

        public override YieldComp (expr : PExpr) : PExpr
        {
            ignore (expr);
            Message.FatalError (expr.Location, "The ccr comprehension doesn't support the YieldComp method.")
        }

        public override Bind (expr : PExpr, name : PExpr, cont : PExpr) : PExpr
        {
            if (dispatcherQueue != null)
            {
                <[ CcrBuilder.Bind($(dispatcherQueueLocalName : name), $expr, $name => $cont) ]>;
            }
            else
            {
                Message.FatalError (expr.Location, "In order to use Bind method you must specify dispatcher queue as ccr comprehension parameter.")
            }
        }

        public override Delay (expr : PExpr) : PExpr
        {
            ignore (expr);
            Message.FatalError (expr.Location, "The ccr comprehension doesn't support the Delay method.")
        }

        public override Combine (expr1 : PExpr, expr2 : PExpr) : PExpr 
        {
            ignore (expr1);
            ignore (expr2);
            Message.FatalError (expr1.Location, "The ccr comprehension doesn't support the Combine method.")
        }

        public override Run (expr : PExpr) : PExpr
        {
            Macros.DefineCTX(typer);
            
            def makeResult(tExpr : TExpr) : PExpr
            {                
                def tAsyncValueExpr = <[ ttype: NThrift.Ccr.CAsync[_] ]>;
                
                def exhandler = 
                    if (tAsyncValueExpr.TryUnify(tExpr.Type))
                    {
                        <[ CcrBuilder.Fail.[_] ]>
                    }
                    else
                    {
                        <[ CcrBuilder.Fail ]>
                    }
                
                <[
                {
                    try
                    {
                        $(tExpr : typed)
                    }
                    catch
                    {
                        ex => $exhandler(ex);
                    }
                }
                ]>                
            }  
            
            def exprWithAssertions = 
            if (dispatcherQueue != null)
            {
                def dispatcherQueueStr = $"$dispatcherQueue";
                <[
                {
                    def $(dispatcherQueueLocalName : name) = $dispatcherQueue;
                    when ($(dispatcherQueueLocalName : name) == null) throw ArgumentNullException($(dispatcherQueueStr : string), "Dispatcher queue must not be null.");
                    $expr;
                }
                ]>
            }
            else
            {
                expr
            }
            
            def tExpr = typer.TypeExpr(exprWithAssertions);                                
            match(tExpr.Type.Hint)
            {
                | Some(_) => makeResult(tExpr)
                | _       => typer.DelayMacro(lastTry =>
                                match(tExpr.Type.Hint)
                                {
                                    | Some(_) => Some(makeResult(tExpr))
                                    | _       => when (lastTry) Message.Error(expr.Location, $"Can't determine type of '$expr'");
                                                    None()
                                }
                                );
            }            
        }

        public override Zero () : PExpr
        {
            Message.FatalError ("The ccr comprehension doesn't support the Zero method.")
        }

        public override While (pred : PExpr, body : PExpr) : PExpr
        {
            ignore (pred);
            ignore (body);
            Message.FatalError (pred.Location, "The ccr comprehension doesn't support the While method.")
        }

        public override ForEach (name : PExpr, coll : PExpr, body : PExpr) : PExpr
        {
            ignore (name);
            ignore (coll);
            ignore (body);
            Message.FatalError (name.Location, "The ccr comprehension doesn't support the ForEach method.")
        }

        protected override ForEach (coll : PExpr, cont : PExpr) : PExpr
        {
            ignore (coll);
            ignore (cont);
            Message.FatalError (coll.Location, "The ccr comprehension doesn't support the ForEach method.")
        }

        public override For (init : PExpr, cond : PExpr, change : PExpr, body : PExpr) : PExpr
        {
            ignore (init);
            ignore (cond);
            ignore (change);
            ignore (body);
            Message.FatalError (init.Location, "The ccr comprehension doesn't support the For method.")
        }

        public override DoWhile (pred : PExpr, body : PExpr) : PExpr
        {
            ignore (pred);
            ignore (body);
            Message.FatalError (pred.Location, "The ccr comprehension doesn't support the DoWhile method.")
        }

        public override TryFinally (body : PExpr, handler : PExpr) : PExpr
        {
            ignore (body);
            ignore (handler);            
            Message.FatalError (body.Location, "The ccr comprehension doesn't support the TryFinally method.")
        }

        public override TryCatch (body : PExpr, cases : list [TryCase]) : PExpr
        {
            ignore (body);
            ignore (cases);                        
            Message.FatalError (body.Location, "The ccr comprehension doesn't support the TryCatch method.")
        }

        protected override TryCatch (body : PExpr, cont : PExpr) : PExpr
        {
            ignore (body);
            ignore (cont);
            Message.FatalError (body.Location, "The ccr comprehension doesn't support the TryCatch method.")
        }

        public override Using (expr : PExpr, name : PExpr, body : PExpr) : PExpr
        {
            ignore (expr);
            ignore (name);
            ignore (body);
            Message.FatalError (expr.Location, "The ccr comprehension doesn't support the Using method.")
        }        
    }    
}
