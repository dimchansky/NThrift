using Nemerle;
using Nemerle.Collections;
using Nemerle.ComputationExpressions;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NThrift.Ccr.Macros
{
    macro @ccrcomp(expr : PExpr)
    syntax ("ccrcomp", expr) 
    {
        CcrCompImpl.DoTransform(Macros.ImplicitCTX(), expr)
    }

    module CcrCompImpl
    {
        public DoTransform(typer : Typer, expr : PExpr) : PExpr
        {
            Macros.DefineCTX(typer);
            def builder = CcrBuilder(typer);
            //assert2(false);
            ComputationExpander.Expand (builder, expr);
        }
    }    

/*    
  [Nemerle.MacroUsage(Nemerle.MacroPhase.BeforeTypedMembers,
    Nemerle.MacroTargets.Method,
    Inherited = true,
    AllowMultiple = false)]
  public macro CcrMethod(typeBuilder : TypeBuilder, method : ClassMember.Function)
  syntax("ccr")
  {
      CcrMethodImpl.DoTransform(Macros.ImplicitCTX(), typeBuilder, method)
  }

  module CcrMethodImpl
  {
    public DoTransform(typer : Typer, typeBuilder : TypeBuilder, method : ClassMember.Function) : void
    {
        //assert2(false);
        Macros.DefineCTX(typer);

        _ = typeBuilder; 
        _ = method;

        def prs = method.header.Parameters;             

        match (prs)
        {
            | []    => Message.Error(method.header.Location, "Last parameter must be of type PortSet<TResult,Exception>")
            | ps    => def lastParam = ps.Last;
                       def lastParamType = typer.BindFixedType(lastParam.Type);
                       Message.Hint(lastParam.Location, $"$(lastParam.Name) : $lastParamType"); 
                       def portSetType = <[ ttype: Microsoft.Ccr.Core.PortSet[_,_] ]>;

                       when (portSetType.TryUnify(lastParamType))
                       {
                           portSetType.ForceUnify(lastParamType);
                           Message.Hint(lastParam.Location, $"Try unify = $portSetType");
                       }                       
        }
    }      
  }
*/  
}
