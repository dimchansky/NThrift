using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using Microsoft.Ccr.Core;

using NThrift.Ccr.Extensions;

namespace NThrift.Ccr
{   
    public module CcrBuilder
    {
        public Return[A](value : A) : CAsync[A]
        {
            CAsync.CreateResult(value)
        }
        
        public Return() : CAsync
        {
            CAsync.CreateResult()
        }        
        
        public Fail[A](ex : System.Exception) : CAsync[A]
        {
            CAsync.[A].CreateException(ex);
        }
        
        public Fail(ex : System.Exception) : CAsync
        {
            CAsync.CreateException(ex);
        }
        
        public Bind[A, B]([NotNull]dq : DispatcherQueue, 
                          async : CAsync[A], 
                          f : A -> CAsync[B]) : CAsync[B]
        {
            match (async.Type)
            {
                | CAsyncType.CompletedResult    =>  
                        try
                        {
                            f(async.Result)
                        }
                        catch
                        {
                            ex => CAsync.[B].CreateException(ex)
                        }
                                                    
                | CAsyncType.CompletedException =>  
                        assert2(async.Exception != null);
                        CAsync.[B].CreateException(async.Exception)
                                                    
                | CAsyncType.Async              =>                          
                        assert2(async.ResultPort != null);
                        
                        // check for possible synchronous result
                        mutable res;                        
                        if (async.ResultPort.P0.Test(out res)) // test for result
                        {
                            async.ResultPort.Post(res);
                            try
                            {
                                f(async.Result)
                            }
                            catch
                            {
                                ex => CAsync.[B].CreateException(ex)
                            }
                        }
                        else
                        {
                            mutable ex;
                            if (async.ResultPort.P1.Test(out ex)) // test for exception
                            {
                                async.ResultPort.Post(ex);
                                CAsync.[B].CreateException(ex);
                            }
                            else
                            {
                                def contResultPort = ResultFailurePort();
                                               
                                Arbiter.Activate(dq,
                                    Arbiter.Choice(async.ResultPort,
                                        res  => 
                                        {
                                            async.ResultPort.Post(res);
                                            try
                                            {
                                                def contAsync = f(res);
                                                contAsync.PostToPort(dq, contResultPort);
                                            }
                                            catch
                                            {
                                                ex => contResultPort.Post(ex)
                                            }
                                        },
                                        ex => 
                                        {
                                            async.ResultPort.Post(ex);
                                            contResultPort.Post(ex)
                                        }));
                                
                                CAsync.[B].CreateAsync(contResultPort);                                
                            }
                        }                                                        
            }
        }

        public Bind[A, B]([NotNull]dq : DispatcherQueue, 
                          async : CAsync[A], 
                          f : void -> CAsync[B]) : CAsync[B]
        {
            match (async.Type)
            {
                | CAsyncType.CompletedResult    =>  
                        try
                        {
                            f()
                        }
                        catch
                        {
                            ex => CAsync.[B].CreateException(ex)
                        }
                                                    
                | CAsyncType.CompletedException =>  
                        assert2(async.Exception != null);
                        CAsync.[B].CreateException(async.Exception)
                                                    
                | CAsyncType.Async              =>                          
                        assert2(async.ResultPort != null);
                        
                        // check for possible synchronous result
                        mutable res;                        
                        if (async.ResultPort.P0.Test(out res)) // test for result
                        {
                            async.ResultPort.Post(res);
                            try
                            {
                                f()
                            }
                            catch
                            {
                                ex => CAsync.[B].CreateException(ex)
                            }
                        }
                        else
                        {
                            mutable ex;
                            if (async.ResultPort.P1.Test(out ex)) // test for exception
                            {
                                async.ResultPort.Post(ex);
                                CAsync.[B].CreateException(ex);
                            }
                            else
                            {
                                def contResultPort = ResultFailurePort();
                                               
                                Arbiter.Activate(dq,
                                    Arbiter.Choice(async.ResultPort,
                                        res  => 
                                        {
                                            async.ResultPort.Post(res);
                                            try
                                            {
                                                def contAsync = f();
                                                contAsync.PostToPort(dq, contResultPort);
                                            }
                                            catch
                                            {
                                                ex => contResultPort.Post(ex)
                                            }
                                        },
                                        ex => 
                                        {
                                            async.ResultPort.Post(ex);
                                            contResultPort.Post(ex)
                                        }));
                                
                                CAsync.[B].CreateAsync(contResultPort);                                
                            }
                        }                                                        
            }            
        }        
        
        public Bind[A]   ([NotNull]dq : DispatcherQueue, 
                          async : CAsync[A], 
                          f : A -> CAsync) : CAsync
        {
            match (async.Type)
            {
                | CAsyncType.CompletedResult    =>  
                        try
                        {
                            f(async.Result)
                        }
                        catch
                        {
                            ex => CAsync.CreateException(ex)
                        }
                                                    
                | CAsyncType.CompletedException =>  
                        assert2(async.Exception != null);
                        CAsync.CreateException(async.Exception)
                                                    
                | CAsyncType.Async              =>                          
                        assert2(async.ResultPort != null);
                        
                        // check for possible synchronous result
                        mutable res;                        
                        if (async.ResultPort.P0.Test(out res)) // test for result
                        {
                            async.ResultPort.Post(res);
                            try
                            {
                                f(async.Result)
                            }
                            catch
                            {
                                ex => CAsync.CreateException(ex)
                            }
                        }
                        else
                        {
                            mutable ex;
                            if (async.ResultPort.P1.Test(out ex)) // test for exception
                            {
                                async.ResultPort.Post(ex);
                                CAsync.CreateException(ex);
                            }
                            else
                            {
                                def contResultPort = ResultFailurePort();
                                               
                                Arbiter.Activate(dq,
                                    Arbiter.Choice(async.ResultPort,
                                        res  => 
                                        {
                                            async.ResultPort.Post(res);
                                            try
                                            {
                                                def contAsync = f(res);
                                                contAsync.PostToPort(dq, contResultPort);
                                            }
                                            catch
                                            {
                                                ex => contResultPort.Post(ex)
                                            }
                                        },
                                        ex => 
                                        {
                                            async.ResultPort.Post(ex);
                                            contResultPort.Post(ex)
                                        }));
                                
                                CAsync.CreateAsync(contResultPort);                                
                            }
                        }                                                        
            }
        }        
              
        public Bind[A]   ([NotNull]dq : DispatcherQueue, 
                          async : CAsync[A], 
                          f : void -> CAsync) : CAsync
        {
            match (async.Type)
            {
                | CAsyncType.CompletedResult    =>  
                        try
                        {
                            f()
                        }
                        catch
                        {
                            ex => CAsync.CreateException(ex)
                        }
                                                    
                | CAsyncType.CompletedException =>  
                        assert2(async.Exception != null);
                        CAsync.CreateException(async.Exception)
                                                    
                | CAsyncType.Async              =>                          
                        assert2(async.ResultPort != null);
                        
                        // check for possible synchronous result
                        mutable res;                        
                        if (async.ResultPort.P0.Test(out res)) // test for result
                        {
                            async.ResultPort.Post(res);
                            try
                            {
                                f()
                            }
                            catch
                            {
                                ex => CAsync.CreateException(ex)
                            }
                        }
                        else
                        {
                            mutable ex;
                            if (async.ResultPort.P1.Test(out ex)) // test for exception
                            {
                                async.ResultPort.Post(ex);
                                CAsync.CreateException(ex);
                            }
                            else
                            {
                                def contResultPort = ResultFailurePort();
                                               
                                Arbiter.Activate(dq,
                                    Arbiter.Choice(async.ResultPort,
                                        res  => 
                                        {
                                            async.ResultPort.Post(res);
                                            try
                                            {
                                                def contAsync = f();
                                                contAsync.PostToPort(dq, contResultPort);
                                            }
                                            catch
                                            {
                                                ex => contResultPort.Post(ex)
                                            }
                                        },
                                        ex => 
                                        {
                                            async.ResultPort.Post(ex);
                                            contResultPort.Post(ex)
                                        }));
                                
                                CAsync.CreateAsync(contResultPort);
                            }
                        }                                                        
            }            
        }        
        
        public Bind[   B]([NotNull]dq : DispatcherQueue, 
                          async : CAsync, 
                          f : void -> CAsync[B]) : CAsync[B]
        {
            match (async.Type)
            {
                | CAsyncType.CompletedResult    =>  
                        try
                        {
                            f()
                        }
                        catch
                        {
                            ex => CAsync.[B].CreateException(ex)
                        }
                                                    
                | CAsyncType.CompletedException =>  
                        assert2(async.Exception != null);
                        CAsync.[B].CreateException(async.Exception)
                                                    
                | CAsyncType.Async              =>                          
                        assert2(async.ResultPort != null);
                        
                        // check for possible synchronous result
                        mutable res;                        
                        if (async.ResultPort.P0.Test(out res)) // test for result
                        {
                            async.ResultPort.Post(res);
                            try
                            {
                                f()
                            }
                            catch
                            {
                                ex => CAsync.[B].CreateException(ex)
                            }
                        }
                        else
                        {
                            mutable ex;
                            if (async.ResultPort.P1.Test(out ex)) // test for exception
                            {
                                async.ResultPort.Post(ex);
                                CAsync.[B].CreateException(ex);
                            }
                            else
                            {
                                def contResultPort = ResultFailurePort();
                                               
                                Arbiter.Activate(dq,
                                    Arbiter.Choice(async.ResultPort,
                                        res  => 
                                        {
                                            async.ResultPort.Post(res);
                                            try
                                            {
                                                def contAsync = f();
                                                contAsync.PostToPort(dq, contResultPort);
                                            }
                                            catch
                                            {
                                                ex => contResultPort.Post(ex)
                                            }
                                        },
                                        ex => 
                                        {
                                            async.ResultPort.Post(ex);
                                            contResultPort.Post(ex)
                                        }));
                                
                                CAsync.[B].CreateAsync(contResultPort);                                
                            }
                        }                                                        
            }            
        }
        
        public Bind      ([NotNull]dq : DispatcherQueue, 
                          async : CAsync, 
                          f : void -> CAsync) : CAsync
        {
            match (async.Type)
            {
                | CAsyncType.CompletedResult    =>  
                        try
                        {
                            f()
                        }
                        catch
                        {
                            ex => CAsync.CreateException(ex)
                        }
                                                    
                | CAsyncType.CompletedException =>  
                        assert2(async.Exception != null);
                        CAsync.CreateException(async.Exception)
                                                    
                | CAsyncType.Async              =>                          
                        assert2(async.ResultPort != null);
                        
                        // check for possible synchronous result
                        mutable res;                        
                        if (async.ResultPort.P0.Test(out res)) // test for result
                        {
                            async.ResultPort.Post(res);
                            try
                            {
                                f()
                            }
                            catch
                            {
                                ex => CAsync.CreateException(ex)
                            }
                        }
                        else
                        {
                            mutable ex;
                            if (async.ResultPort.P1.Test(out ex)) // test for exception
                            {
                                async.ResultPort.Post(ex);
                                CAsync.CreateException(ex);
                            }
                            else
                            {
                                def contResultPort = ResultFailurePort();
                                               
                                Arbiter.Activate(dq,
                                    Arbiter.Choice(async.ResultPort,
                                        res  => 
                                        {
                                            async.ResultPort.Post(res);
                                            try
                                            {
                                                def contAsync = f();
                                                contAsync.PostToPort(dq, contResultPort);
                                            }
                                            catch
                                            {
                                                ex => contResultPort.Post(ex)
                                            }
                                        },
                                        ex => 
                                        {
                                            async.ResultPort.Post(ex);
                                            contResultPort.Post(ex)
                                        }));
                                
                                CAsync.CreateAsync(contResultPort);                                
                            }
                        }                                                        
            }                        
        }
    }
}
