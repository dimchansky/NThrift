using System;

using Nemerle.Utility;

using Microsoft.Ccr.Core;    

namespace NThrift.Ccr
{
    public type ResultFailurePort[TResult] = PortSet[TResult, Exception];
    public type VoidFailurePort = ResultFailurePort[EmptyValue];
    
    public enum CAsyncType : byte
    {
        | CompletedResult    = 0
        | CompletedException = 1
        | Async              = 2
    }

    [Record]
    public struct CAsync
    {
        [Accessor(flags=Internal)] type : CAsyncType;
        [Accessor(flags=Internal)] exception : System.Exception;
        [Accessor(flags=Internal)] resultPort : VoidFailurePort;
        
        public static CreateResult(): CAsync
        {
            CAsync(CAsyncType.CompletedResult, null, null)
        }
        
        public static CreateException(ex : System.Exception) : CAsync
        {
            CAsync(CAsyncType.CompletedException, ex, null)
        }
    }    
    
    [Record]
    public struct CAsync[TResult]
    {
        [Accessor(flags=Internal)] type : CAsyncType;
        [Accessor(flags=Internal)] result : TResult;
        [Accessor(flags=Internal)] exception : System.Exception;
        [Accessor(flags=Internal)] resultPort : ResultFailurePort[TResult];
        
        public static CreateResult(result : TResult): CAsync[TResult]
        {
            CAsync(CAsyncType.CompletedResult, result, null, null)
        }
        
        public static CreateException(ex : System.Exception) : CAsync[TResult]
        {
            CAsync(CAsyncType.CompletedException, default(TResult), ex, null)
        }
    }   
}
